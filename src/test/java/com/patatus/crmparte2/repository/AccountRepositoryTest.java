package com.patatus.crmparte2.repository;

import com.patatus.crmparte2.controller.Controller;
import com.patatus.crmparte2.model.classes.*;
import com.patatus.crmparte2.model.enums.Industry;
import com.patatus.crmparte2.model.enums.Product;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;

import java.math.BigInteger;
import java.util.List;

import static org.junit.jupiter.api.Assertions.*;

@SpringBootTest
class AccountRepositoryTest {

    @Autowired
    SalesRepRepository salesRepRepository;
    @Autowired
    ContactRepository contactRepository;
    @Autowired
    OpportunityRepository opportunityRepository;
    @Autowired
    AccountRepository accountRepository;
    @Autowired
    Controller controller;


    @BeforeEach
    void setUp() {
        SalesRep salesRep1 = salesRepRepository.save(new SalesRep("Pepe"));
        SalesRep salesRep2 = salesRepRepository.save(new SalesRep("Juan"));

        Account account1 = accountRepository.save(new Account(Industry.PRODUCE, 20, "Madrid", "Spain"));
        Account account2 = accountRepository.save(new Account(Industry.ECOMMERCE, 2, "Barcelona", "Spain"));

        Contact contact1 = contactRepository.save(new Contact("María", "916726410", "maria@transportesmaria.com", "Transportes María"));
        Contact contact2 = contactRepository.save(new Contact("Antonio", "62913665", "antonio@antruck.com", "Antruck S.L."));
        Contact contact3 = contactRepository.save(new Contact("Sonia", "676208814", "sonia@wowpackages.com", "Wow Packages!"));

        Opportunity opportunity1 = opportunityRepository.save(new Opportunity(contact1, Product.BOX, 5, salesRep1, account1));
        Opportunity opportunity2 = opportunityRepository.save(new Opportunity(contact2, Product.FLATBED, 4, salesRep1, account1));
        Opportunity opportunity3 = new Opportunity(contact3, Product.HYBRID, 3, salesRep2, account2);
        opportunity3.closeWon();
        opportunityRepository.save(opportunity3);
    }

    @AfterEach
    void tearDown() {
        opportunityRepository.deleteAll();
        contactRepository.deleteAll();
        accountRepository.deleteAll();
        salesRepRepository.deleteAll();
    }

    @Test
    public void findAll() {
        // SalesRep:
        List<SalesRep> salesRepList = salesRepRepository.findAll();
        assertEquals(2, salesRepList.size());
        assertEquals("Pepe", salesRepList.get(0).getName());
        // Opportunities:
        List<Opportunity> opportunityList = opportunityRepository.findAll();
        assertEquals(3, opportunityList.size());
        assertEquals(5, opportunityList.get(0).getQuantity());
        // Account:
        List<Account> accountList = accountRepository.findAll();
        assertEquals(2, accountList.size());
        assertEquals(20, accountList.get(0).getEmployeeCount());
    }

    @Test
    public void findMeanEmployeeCount() {
        assertEquals(11, accountRepository.findMeanEmployeeCount());
    }

    @Test
    public void findMaxEmployeeCount() {
        List<Account> accounts = accountRepository.findAll(); // This is to avoid problems with autogenerated ID in tests.
        List<Object[]> maxEmployee = accountRepository.findMaxEmployeeCount();
        assertEquals(maxEmployee.get(0)[0],accounts.get(0).getId());
        assertEquals(maxEmployee.get(0)[1],20);
    }

    @Test
    public void findMinEmployeeCount() {
        List<Account> accounts = accountRepository.findAll(); // This is to avoid problems with autogenerated ID in tests.
        List<Object[]> minEmployee = accountRepository.findMinEmployeeCount();
        assertEquals(minEmployee.get(0)[0],accounts.get(1).getId());
        assertEquals(minEmployee.get(0)[1],2);
    }

    @Test
    public void findMaxOpportunitiesByAccount(){
        List<Account> accounts = accountRepository.findAll(); // This is to avoid problems with autogenerated ID in tests.
        List<Object[]> maxOpportunities = accountRepository.findMaxOpportunitiesByAccount();
        assertEquals(maxOpportunities.get(0)[0], accounts.get(0).getId());
        assertEquals(maxOpportunities.get(0)[1], BigInteger.valueOf(2));
    }

    @Test
    public void findMinOpportunitiesByAccount(){
        List<Account> accounts = accountRepository.findAll(); // This is to avoid problems with autogenerated ID in tests.
        List<Object[]> minOpportunities = accountRepository.findMinOpportunitiesByAccount();
        assertEquals(minOpportunities.get(0)[0], accounts.get(1).getId());
        assertEquals(minOpportunities.get(0)[1], BigInteger.valueOf(1));
    }

    @Test
    public void findAvgOpportunitiesByAccount(){
        assertEquals(1.5, accountRepository.findAvgOpportunitiesByAccount());
    }

    @Test
    public void findMedianOpportunitiesByAccount(){

    }
}